<b:beans xmlns="http://www.springframework.org/schema/security"
		 xmlns:b="http://www.springframework.org/schema/beans"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://www.springframework.org/schema/beans 
		 					 http://www.springframework.org/schema/beans/spring-beans.xsd
							 http://www.springframework.org/schema/security 
							 http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 3 ways to authorize 
		 1. URL 
		 2. Method level annotations
		 3. Method level pointcuts -->

	<!-- Stateless RESTful services using BASIC authentication -->
	<http create-session="stateless">
		<!-- 1. Here we are using URL authorization. The method attribute is optional. -->
		<!-- <intercept-url pattern="/rest/**" method="GET" access="hasAnyRole('USER, ADMIN')"/> -->
		<!-- <intercept-url pattern="/rest/**" method="POST" access="hasAnyRole('ADMIN')"/> -->
		<!-- <intercept-url pattern="/rest/**" method="PUT" access="hasAnyRole('ADMIN')"/> -->
		<!-- <intercept-url pattern="/rest/**" method="DELETE" access="hasAnyRole('ADMIN')"/> -->
        <http-basic/>
        <!-- Disabled so we can use Postman. -->
        <csrf disabled="true"/> 
    </http>
	
	<!-- 2. Here we are using Resource authorization with annotations. 
		 First, you label the *Resource class (ie, CustomerResource) with the @Component annotation then
		 you label each REST endpoint with @PreAuthorize("hasRole('ADMIN')") or @PreAuthorize("hasAnyRole('USER, ADMIN')")
		 assigning the appropriate role to the REST endpoint. Security annotations take precedence over pointcuts which
		 we cover below. -->
	<!-- <global-method-security pre-post-annotations="enabled"/> -->
	
	<!-- 3. Here we are using Resource authorization with pointcuts. 
		 First, you label the *Resource class (ie, CustomerResource) with the @Component annotation then
		 you create pointcuts for each method in a class. Security annotations take precedence over pointcuts. 
		 As you can see this is by far the best way secure methods, the CustomerResource class is secure. -->
	<global-method-security>
		<protect-pointcut expression="execution(* com.rest.resource.*Resource.create*(..))" access="ROLE_ADMIN"/>
		<protect-pointcut expression="execution(* com.rest.resource.*Resource.update*(..))" access="ROLE_ADMIN"/>
        <protect-pointcut expression="execution(* com.rest.resource.*Resource.delete*(..))" access="ROLE_ADMIN"/>
        <protect-pointcut expression="execution(* com.rest.resource.*Resource.get*(..))" access="ROLE_USER,ROLE_ADMIN"/>
	</global-method-security>
	
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="admin" password="admin" authorities="ROLE_USER,ROLE_ADMIN"/>
				<user name="user" password="user" authorities="ROLE_USER"/>
			</user-service>
		</authentication-provider>
	</authentication-manager>

</b:beans>

